@use 'sass:map';
@use 'sass:math';
@use 'configs';
@use 'funcs';

@mixin media-breakpoint-up($name, $breakpoints: configs.$grid-breakpoints) {
  $min: funcs.breakpoint-min($name, $breakpoints);
  @if $min {
    @media (min-width: $min) {
      @content;
    }
  } @else {
    @content;
  }
}

@mixin media-breakpoint-down($name, $breakpoints: configs.$grid-breakpoints) {
  $max: funcs.breakpoint-max($name, $breakpoints);
  @if $max {
    @media (max-width: $max) {
      @content;
    }
  } @else {
    @content;
  }
}

@mixin media-breakpoint-between($lower, $upper, $breakpoints: configs.$grid-breakpoints) {
  $min: funcs.breakpoint-min($lower, $breakpoints);
  $max: funcs.breakpoint-max($upper, $breakpoints);

  @if $min != null and $max != null {
    @media (min-width: $min) and (max-width: $max) {
      @content;
    }
  } @else if $max == null {
    @include media-breakpoint-up($lower, $breakpoints) {
      @content;
    }
  } @else if $min == null {
    @include media-breakpoint-down($upper, $breakpoints) {
      @content;
    }
  }
}

// Media between the breakpoints minimum and maximum widths.
// No minimum for the smallest breakpoint, and no maximum for the largest one.
// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.
@mixin media-breakpoint-only($name, $breakpoints: configs.$grid-breakpoints) {
  $min: funcs.breakpoint-min($name, $breakpoints);
  $max: funcs.breakpoint-max($name, $breakpoints);

  @if $min != null and $max != null {
    @media (min-width: $min) and (max-width: $max) {
      @content;
    }
  } @else if $max == null {
    @include media-breakpoint-up($name, $breakpoints) {
      @content;
    }
  } @else if $min == null {
    @include media-breakpoint-down($name, $breakpoints) {
      @content;
    }
  }
}

@mixin make-row($gutter: configs.$grid-gutter-width) {
  display: flex;
  flex-wrap: wrap;
  margin-right: -$gutter * 0.5;
  margin-left: -$gutter * 0.5;
}

@mixin make-col-ready($gutter: configs.$grid-gutter-width) {
  position: relative;
  width: 100%;
  padding: $gutter * 0.5;
}

@mixin make-col($size, $columns: configs.$grid-columns) {
  flex: 0 0 math.percentage(funcs.divide($size, $columns));
  max-width: math.percentage(funcs.divide($size, $columns));
}

@mixin make-col-auto() {
  flex: 0 0 auto;
  width: auto;
  max-width: 100%;
}

@mixin make-col-offset($size, $columns: configs.$grid-columns) {
  $num: funcs.divide($size, $columns);
  margin-left: if($num == 0, 0, math.percentage($num));
}

// Row columns
// Specify on a parent element(e.g., .row) to force immediate children into NN
// number of columns. Supports wrapping to new lines, but does not do a Masonry
// style grid.
@mixin row-cols($count) {
  > * {
    flex: 0 0 funcs.divide(100%, $count);
    max-width: funcs.divide(100%, $count);
  }
}

@mixin make-grid-columns(
  $columns: configs.$grid-columns,
  $gutter: configs.$grid-gutter-width,
  $breakpoints: configs.$grid-breakpoints
) {
  // Common properties for all breakpoints
  %grid-column {
    position: relative;
    width: 100%;
    padding: $gutter * 0.5;
  }

  @each $breakpoint in map.keys($breakpoints) {
    $infix: funcs.breakpoint-infix($breakpoint, $breakpoints);

    @if $columns > 0 {
      // Allow columns to stretch full width below their breakpoints
      @for $i from 1 through $columns {
        .mk-col#{$infix}-#{$i} {
          @extend %grid-column;
        }
      }
    }

    .mk-col#{$infix},
    .mk-col#{$infix}-auto {
      @extend %grid-column;
    }

    @include media-breakpoint-up($breakpoint, $breakpoints) {
      // Provide basic `.col-{bp}` classes for equal-width flexbox columns
      .mk-col#{$infix} {
        flex-basis: 0;
        flex-grow: 1;
        max-width: 100%;
      }

      @if configs.$grid-row-columns > 0 {
        @for $i from 1 through configs.$grid-row-columns {
          .mk-row-cols#{$infix}-#{$i} {
            @include row-cols($i);
          }
        }
      }

      .mk-col#{$infix}-auto {
        @include make-col-auto();
      }

      @if $columns > 0 {
        @for $i from 1 through $columns {
          .mk-col#{$infix}-#{$i} {
            @include make-col($i, $columns);
          }
        }
      }

      .mk-order#{$infix}-first {
        order: -1;
      }

      .mk-col-order#{$infix}-last {
        order: $columns + 1;
      }

      @for $i from 0 through $columns {
        .mk-col-order#{$infix}-#{$i} {
          order: $i;
        }
      }

      @if $columns > 0 {
        // `$columns - 1` because offsetting by the width of an entire row isn't possible
        @for $i from 0 through ($columns - 1) {
          @if not($infix == '' and $i == 0) {
            // Avoid emitting useless .offset-0
            .mk-col-offset#{$infix}-#{$i} {
              @include make-col-offset($i, $columns);
            }
          }
        }
      }
    }
  }
}

@mixin for-phone-only {
  @media screen and (max-width: map.get(configs.$grid-breakpoints, 'sm')) {
    @content;
  }
}

@mixin for-phone-up {
  @media screen and (min-width: map.get(configs.$grid-breakpoints, 'sm')) {
    @content;
  }
}

@mixin for-tablet-up {
  @media screen and (min-width: map.get(configs.$grid-breakpoints, 'md')) {
    @content;
  }
}

@mixin for-tablet-down {
  @media screen and (max-width: map.get(configs.$grid-breakpoints, 'md')) {
    @content;
  }
}

@mixin for-tablet-landscape-up {
  @media screen and (min-width: map.get(configs.$grid-breakpoints, 'lg')) {
    @content;
  }
}

@mixin for-tablet-landscape-down {
  @media screen and (max-width: map.get(configs.$grid-breakpoints, 'lg')) {
    @content;
  }
}

@mixin for-desktop-up {
  @media screen and (min-width: map.get(configs.$grid-breakpoints, 'xl')) {
    @content;
  }
}

@mixin for-desktop-down {
  @media screen and (max-width: map.get(configs.$grid-breakpoints, 'xl')) {
    @content;
  }
}
